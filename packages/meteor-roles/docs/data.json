{
    "project": {
        "name": "The meteor-roles API",
        "description": "The meteor-roles API: a role-based authorization package for Meteor",
        "version": "v1.2.12"
    },
    "files": {
        "roles/.build.alanning:roles/os/packages/alanning:roles.js": {
            "name": "roles/.build.alanning:roles/os/packages/alanning:roles.js",
            "modules": {
                "Roles                                                                                           // 6\n/                                                                                                        // 7\n                                                                                                          // 8\n/**                                                                                                        // 9\nRoles collection documents consist only of an id and a role name.                                       // 10\n  ex: { _id:<uuid>, name: \"admin\" }                                                                     // 11\n/                                                                                                        // 12\nif (!Meteor.roles) {                                                                                       // 13\n Meteor.roles = new Meteor.Collection(\"roles\")                                                            // 14\n}                                                                                                          // 15\n                                                                                                          // 16\n/**                                                                                                        // 17\nRole-based authorization compatible with built-in Meteor accounts package.                              // 18\n                                                                                                        // 19\nStores user's current roles in a 'roles' field on the user object.                                      // 20\n                                                                                                        // 21": 1
            },
            "classes": {
                "Roles                                                                                            // 22": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "roles/.build.alanning:roles/web.browser/packages/alanning:roles.js": {
            "name": "roles/.build.alanning:roles/web.browser/packages/alanning:roles.js",
            "modules": {},
            "classes": {},
            "fors": {
                "UIHelpers                                                                                                // 42\n/                                                                                                              // 43\n isInRole: function (role, group) {                                                                               // 44\n   var user = Meteor.user(),                                                                                      // 45\n       comma = (role || '').indexOf(','),                                                                         // 46\n       roles                                                                                                      // 47\n                                                                                                                  // 48\n   if (!user) return false                                                                                        // 49\n   if (!Match.test(role, String)) return false                                                                    // 50\n                                                                                                                  // 51\n   if (comma !== -1) {                                                                                            // 52\n     roles = _.reduce(role.split(','), function (memo, r) {                                                       // 53\n       if (!r || !r.trim()) {                                                                                     // 54\n         return memo                                                                                              // 55\n       }                                                                                                          // 56\n       memo.push(r.trim())                                                                                        // 57\n       return memo                                                                                                // 58\n     }, [])                                                                                                       // 59\n   } else {                                                                                                       // 60\n     roles = [role]                                                                                               // 61\n   }                                                                                                              // 62\n                                                                                                                  // 63\n   if (Match.test(group, String)) {                                                                               // 64\n     return Roles.userIsInRole(user, roles, group)                                                                // 65\n   }                                                                                                              // 66\n                                                                                                                  // 67\n   return Roles.userIsInRole(user, roles)                                                                         // 68\n }                                                                                                                // 69\n}                                                                                                                  // 70\n                                                                                                                  // 71\nif (Package.ui) {                                                                                                  // 72\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 73\n   Package.ui.UI.registerHelper(name, func)                                                                       // 74\n })                                                                                                               // 75\n} else if (Package.handlebars) {                                                                                   // 76\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 77\n   Package.handlebars.Handlebars.registerHelper(name, func)                                                       // 78\n })                                                                                                               // 79\n} else {                                                                                                           // 80\n console.log && console.log('WARNING: Roles template helpers not registered. Handlebars or UI package not found') // 81\n}                                                                                                                  // 82\n                                                                                                                  // 83\n}());                                                                                                              // 84\n                                                                                                                  // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);": 1
            },
            "namespaces": {}
        },
        "roles/.build.alanning:roles/web.cordova/packages/alanning:roles.js": {
            "name": "roles/.build.alanning:roles/web.cordova/packages/alanning:roles.js",
            "modules": {
                "Roles                                                                                                   // 6\n/                                                                                                                // 7\n                                                                                                                  // 8\n/**                                                                                                                // 9\nRoles collection documents consist only of an id and a role name.                                               // 10\n  ex: { _id:<uuid>, name: \"admin\" }                                                                             // 11\n/                                                                                                                // 12\nif (!Meteor.roles) {                                                                                               // 13\n Meteor.roles = new Meteor.Collection(\"roles\")                                                                    // 14\n}                                                                                                                  // 15\n                                                                                                                  // 16\n/**                                                                                                                // 17\nRole-based authorization compatible with built-in Meteor accounts package.                                      // 18\n                                                                                                                // 19\nStores user's current roles in a 'roles' field on the user object.                                              // 20\n                                                                                                                // 21": 1,
                "UIHelpers                                                                                               // 10\n/                                                                                                                // 11\n                                                                                                                  // 12\n////////////////////////////////////////////////////////////                                                       // 13\n// UI helpers                                                                                                      // 14\n//                                                                                                                 // 15\n// Use a semi-private variable rather than declaring UI                                                            // 16\n// helpers directly so that we can unit test the helpers.                                                          // 17\n// XXX For some reason, the UI helpers are not registered                                                          // 18\n// before the tests run.                                                                                           // 19\n//                                                                                                                 // 20\nRoles._uiHelpers = {                                                                                               // 21\n                                                                                                                  // 22\n /**                                                                                                              // 23\nUI helper to check if current user is in at least one                                                         // 24\nof the target roles.  For use in client-side templates.                                                       // 25\n                                                                                                              // 26": 1
            },
            "classes": {
                "Roles                                                                                                    // 22": 1
            },
            "fors": {
                "UIHelpers                                                                                                // 42\n/                                                                                                              // 43\n isInRole: function (role, group) {                                                                               // 44\n   var user = Meteor.user(),                                                                                      // 45\n       comma = (role || '').indexOf(','),                                                                         // 46\n       roles                                                                                                      // 47\n                                                                                                                  // 48\n   if (!user) return false                                                                                        // 49\n   if (!Match.test(role, String)) return false                                                                    // 50\n                                                                                                                  // 51\n   if (comma !== -1) {                                                                                            // 52\n     roles = _.reduce(role.split(','), function (memo, r) {                                                       // 53\n       if (!r || !r.trim()) {                                                                                     // 54\n         return memo                                                                                              // 55\n       }                                                                                                          // 56\n       memo.push(r.trim())                                                                                        // 57\n       return memo                                                                                                // 58\n     }, [])                                                                                                       // 59\n   } else {                                                                                                       // 60\n     roles = [role]                                                                                               // 61\n   }                                                                                                              // 62\n                                                                                                                  // 63\n   if (Match.test(group, String)) {                                                                               // 64\n     return Roles.userIsInRole(user, roles, group)                                                                // 65\n   }                                                                                                              // 66\n                                                                                                                  // 67\n   return Roles.userIsInRole(user, roles)                                                                         // 68\n }                                                                                                                // 69\n}                                                                                                                  // 70\n                                                                                                                  // 71\nif (Package.ui) {                                                                                                  // 72\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 73\n   Package.ui.UI.registerHelper(name, func)                                                                       // 74\n })                                                                                                               // 75\n} else if (Package.handlebars) {                                                                                   // 76\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 77\n   Package.handlebars.Handlebars.registerHelper(name, func)                                                       // 78\n })                                                                                                               // 79\n} else {                                                                                                           // 80\n console.log && console.log('WARNING: Roles template helpers not registered. Handlebars or UI package not found') // 81\n}                                                                                                                  // 82\n                                                                                                                  // 83\n}());                                                                                                              // 84\n                                                                                                                  // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);": 1
            },
            "namespaces": {}
        },
        "roles/roles_client.js": {
            "name": "roles/roles_client.js",
            "modules": {
                "UIHelpers": 1
            },
            "classes": {},
            "fors": {
                "UIHelpers": 1
            },
            "namespaces": {}
        },
        "roles/roles_common.js": {
            "name": "roles/roles_common.js",
            "modules": {
                "Roles": 1
            },
            "classes": {
                "Roles": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "roles/roles_server.js": {
            "name": "roles/roles_server.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Roles                                                                                           // 6\n/                                                                                                        // 7\n                                                                                                          // 8\n/**                                                                                                        // 9\nRoles collection documents consist only of an id and a role name.                                       // 10\n  ex: { _id:<uuid>, name: \"admin\" }                                                                     // 11\n/                                                                                                        // 12\nif (!Meteor.roles) {                                                                                       // 13\n Meteor.roles = new Meteor.Collection(\"roles\")                                                            // 14\n}                                                                                                          // 15\n                                                                                                          // 16\n/**                                                                                                        // 17\nRole-based authorization compatible with built-in Meteor accounts package.                              // 18\n                                                                                                        // 19\nStores user's current roles in a 'roles' field on the user object.                                      // 20\n                                                                                                        // 21": {
            "name": "Roles                                                                                           // 6\n/                                                                                                        // 7\n                                                                                                          // 8\n/**                                                                                                        // 9\nRoles collection documents consist only of an id and a role name.                                       // 10\n  ex: { _id:<uuid>, name: \"admin\" }                                                                     // 11\n/                                                                                                        // 12\nif (!Meteor.roles) {                                                                                       // 13\n Meteor.roles = new Meteor.Collection(\"roles\")                                                            // 14\n}                                                                                                          // 15\n                                                                                                          // 16\n/**                                                                                                        // 17\nRole-based authorization compatible with built-in Meteor accounts package.                              // 18\n                                                                                                        // 19\nStores user's current roles in a 'roles' field on the user object.                                      // 20\n                                                                                                        // 21",
            "submodules": {},
            "classes": {
                "Roles                                                                                            // 22": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "roles/.build.alanning:roles/os/packages/alanning:roles.js",
            "line": 12,
            "description": "Roles collection documents consist only of an id and a role name.                                       // 5\n  ex: { _id:<uuid>, name: \"admin\" }                                                                     // 6\n/                                                                                                        // 7\nif (!Meteor.roles) {                                                                                       // 8\n Meteor.roles = new Meteor.Collection(\"roles\")                                                            // 9\n                                                                                                          // 10\n // Create default indexes for roles collection                                                           // 11\n Meteor.roles._ensureIndex('name', {unique: 1})                                                           // 12\n}                                                                                                          // 13\n                                                                                                          // 14\n                                                                                                          // 15\n/**                                                                                                        // 16\nAlways publish logged-in user's roles so client-side                                                    // 17\nchecks can work.                                                                                        // 18\n/                                                                                                        // 19\nMeteor.publish(null, function () {                                                                         // 20\n var userId = this.userId,                                                                                // 21\n     fields = {roles:1}                                                                                   // 22\n                                                                                                          // 23\n return Meteor.users.find({_id:userId}, {fields: fields})                                                 // 24\n})                                                                                                         // 25\n                                                                                                          // 26\n}());                                                                                                      // 27\n                                                                                                          // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/alanning:roles/roles_common.js                                                                 //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n;(function () {                                                                                            // 1\n                                                                                                          // 2\n/**                                                                                                        // 3\nProvides functions related to user authorization. Compatible with built-in Meteor accounts packages.    // 4\n                                                                                                        // 5",
            "is_constructor": 1,
            "example": [
                "                                                                                              // 39\n    Roles.addUsersToRoles(user, 'admin', Roles.GLOBAL_GROUP)                                          // 40\n    Roles.userIsInRole(user, 'admin') // => true                                                      // 41\n                                                                                                      // 42\n    Roles.setUserRoles(user, 'support-staff', Roles.GLOBAL_GROUP)                                     // 43\n    Roles.userIsInRole(user, 'support-staff') // => true                                              // 44\n    Roles.userIsInRole(user, 'admin') // => false                                                     // 45\n                                                                                                      // 46",
                "                                                                                              // 122\n    Roles.addUsersToRoles(userId, 'admin')                                                            // 123\n    Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')                                    // 124\n    Roles.addUsersToRoles([user1, user2], ['user','editor'])                                          // 125\n    Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')        // 126\n    Roles.addUsersToRoles(userId, 'admin', Roles.GLOBAL_GROUP)                                        // 127\n                                                                                                      // 128",
                "                                                                                              // 151\n    Roles.setUserRoles(userId, 'admin')                                                               // 152\n    Roles.setUserRoles(userId, ['view-secrets'], 'example.com')                                       // 153\n    Roles.setUserRoles([user1, user2], ['user','editor'])                                             // 154\n    Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')           // 155\n    Roles.setUserRoles(userId, 'admin', Roles.GLOBAL_GROUP)                                           // 156\n                                                                                                      // 157",
                "                                                                                              // 180\n    Roles.removeUsersFromRoles(users.bob, 'admin')                                                    // 181\n    Roles.removeUsersFromRoles([users.bob, users.joe], ['editor'])                                    // 182\n    Roles.removeUsersFromRoles([users.bob, users.joe], ['editor', 'user'])                            // 183\n    Roles.removeUsersFromRoles(users.eve, ['user'], 'group1')                                         // 184\n                                                                                                      // 185",
                "                                                                                              // 260\n    // non-group usage                                                                                // 261\n    Roles.userIsInRole(user, 'admin')                                                                 // 262\n    Roles.userIsInRole(user, ['admin','editor'])                                                      // 263\n    Roles.userIsInRole(userId, 'admin')                                                               // 264\n    Roles.userIsInRole(userId, ['admin','editor'])                                                    // 265\n                                                                                                      // 266\n    // per-group usage                                                                                // 267\n    Roles.userIsInRole(user,   ['admin','editor'], 'group1')                                          // 268\n    Roles.userIsInRole(userId, ['admin','editor'], 'group1')                                          // 269\n    Roles.userIsInRole(userId, ['admin','editor'], Roles.GLOBAL_GROUP)                                // 270\n                                                                                                      // 271\n    // this format can also be used as short-hand for Roles.GLOBAL_GROUP                              // 272\n    Roles.userIsInRole(user, 'admin')                                                                 // 273\n                                                                                                      // 274"
            ],
            "itemtype": "method",
            "type": "String                                                                                          // 48",
            "static": "// 49",
            "final": "// 50\n/                                                                                                      // 51\n GLOBAL_GROUP: '__global_roles__',                                                                        // 52\n                                                                                                          // 53\n                                                                                                          // 54\n /**                                                                                                      // 55\nCreate a new role. Whitespace will be trimmed.                                                        // 56\n                                                                                                      // 57",
            "params": [
                {
                    "name": "role",
                    "description": "Name of role                                                                     // 59",
                    "type": "String"
                },
                {
                    "name": "role",
                    "description": "Name of role                                                                     // 93\n/                                                                                                      // 94\n deleteRole: function (role) {                                                                            // 95\n   if (!role) return                                                                                      // 96\n                                                                                                          // 97\n   var foundExistingUser = Meteor.users.findOne(                                                          // 98\n                             {roles: {$in: [role]}},                                                      // 99\n                             {fields: {_id: 1}})                                                          // 100\n                                                                                                          // 101\n   if (foundExistingUser) {                                                                               // 102\n     throw new Meteor.Error(403, 'Role in use')                                                           // 103\n   }                                                                                                      // 104\n                                                                                                          // 105\n   var thisRole = Meteor.roles.findOne({name: role})                                                      // 106\n   if (thisRole) {                                                                                        // 107\n     Meteor.roles.remove({_id: thisRole._id})                                                             // 108\n   }                                                                                                      // 109\n },                                                                                                       // 110\n                                                                                                          // 111\n /**                                                                                                      // 112\nAdd users to roles. Will create roles as needed.                                                      // 113\n                                                                                                      // 114\nNOTE: Mixing grouped and non-grouped roles for the same user                                          // 115\n      is not supported and will throw an error.                                                       // 116\n                                                                                                      // 117\nMakes 2 calls to database:                                                                            // 118\n 1. retrieve list of all existing roles                                                               // 119\n 2. update users' roles                                                                               // 120\n                                                                                                      // 121",
                    "type": "String"
                },
                {
                    "name": "users",
                    "description": "User id(s) or object(s) with an _id field                                 // 130",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles/permissions to add users to                              // 131",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional group name. If supplied, roles will be                               // 132\n                        specific to that group.                                                       // 133\n                        Group names can not start with '$' or numbers.                                // 134\n                        Periods in names '.' are automatically converted                              // 135\n                        to underscores.                                                               // 136\n                        The special group Roles.GLOBAL_GROUP provides                                 // 137\n                        a convenient way to assign blanket roles/permissions                          // 138\n                        across all groups.  The roles/permissions in the                              // 139\n                        Roles.GLOBAL_GROUP group will be automatically                                // 140\n                        included in checks for any group.                                             // 141\n/                                                                                                      // 142\n addUsersToRoles: function (users, roles, group) {                                                        // 143\n   // use Template pattern to update user roles                                                           // 144\n   Roles._updateUserRoles(users, roles, group, Roles._update_$addToSet_fn)                                // 145\n },                                                                                                       // 146\n                                                                                                          // 147\n /**                                                                                                      // 148\nSet a users roles/permissions.                                                                        // 149\n                                                                                                      // 150",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "users",
                    "description": "User id(s) or object(s) with an _id field                                 // 159",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles/permissions to add users to                              // 160",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional group name. If supplied, roles will be                               // 161\n                        specific to that group.                                                       // 162\n                        Group names can not start with '$'.                                           // 163\n                        Periods in names '.' are automatically converted                              // 164\n                        to underscores.                                                               // 165\n                        The special group Roles.GLOBAL_GROUP provides                                 // 166\n                        a convenient way to assign blanket roles/permissions                          // 167\n                        across all groups.  The roles/permissions in the                              // 168\n                        Roles.GLOBAL_GROUP group will be automatically                                // 169\n                        included in checks for any group.                                             // 170\n/                                                                                                      // 171\n setUserRoles: function (users, roles, group) {                                                           // 172\n   // use Template pattern to update user roles                                                           // 173\n   Roles._updateUserRoles(users, roles, group, Roles._update_$set_fn)                                     // 174\n },                                                                                                       // 175\n                                                                                                          // 176\n /**                                                                                                      // 177\nRemove users from roles                                                                               // 178\n                                                                                                      // 179",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "users",
                    "description": "User id(s) or object(s) with an _id field                                 // 187",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to add users to                                          // 188",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional. Group name. If supplied, only that                                  // 189\n                        group will have roles removed.                                                // 190\n/                                                                                                      // 191\n removeUsersFromRoles: function (users, roles, group) {                                                   // 192\n   var update                                                                                             // 193\n                                                                                                          // 194\n   if (!users) throw new Error (\"Missing 'users' param\")                                                  // 195\n   if (!roles) throw new Error (\"Missing 'roles' param\")                                                  // 196\n   if (group) {                                                                                           // 197\n     if ('string' !== typeof group)                                                                       // 198\n       throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 199\n     if ('$' === group[0])                                                                                // 200\n       throw new Error (\"Roles error: groups can not start with '$'\")                                     // 201\n                                                                                                          // 202\n     // convert any periods to underscores                                                                // 203\n     group = group.replace(/\\./g, '_')                                                                    // 204\n   }                                                                                                      // 205\n                                                                                                          // 206\n   // ensure arrays                                                                                       // 207\n   if (!_.isArray(users)) users = [users]                                                                 // 208\n   if (!_.isArray(roles)) roles = [roles]                                                                 // 209\n                                                                                                          // 210\n   // ensure users is an array of user ids                                                                // 211\n   users = _.reduce(users, function (memo, user) {                                                        // 212\n     var _id                                                                                              // 213\n     if ('string' === typeof user) {                                                                      // 214\n       memo.push(user)                                                                                    // 215\n     } else if ('object' === typeof user) {                                                               // 216\n       _id = user._id                                                                                     // 217\n       if ('string' === typeof _id) {                                                                     // 218\n         memo.push(_id)                                                                                   // 219\n       }                                                                                                  // 220\n     }                                                                                                    // 221\n     return memo                                                                                          // 222\n   }, [])                                                                                                 // 223\n                                                                                                          // 224\n   // update all users, remove from roles set                                                             // 225\n                                                                                                          // 226\n   if (group) {                                                                                           // 227\n     update = {$pullAll: {}}                                                                              // 228\n     update.$pullAll['roles.'+group] = roles                                                              // 229\n   } else {                                                                                               // 230\n     update = {$pullAll: {roles: roles}}                                                                  // 231\n   }                                                                                                      // 232\n                                                                                                          // 233\n   try {                                                                                                  // 234\n     if (Meteor.isClient) {                                                                               // 235\n       // Iterate over each user to fulfill Meteor's 'one update per ID' policy                           // 236\n       _.each(users, function (user) {                                                                    // 237\n         Meteor.users.update({_id:user}, update)                                                          // 238\n       })                                                                                                 // 239\n     } else {                                                                                             // 240\n       // On the server we can leverage MongoDB's $in operator for performance                            // 241\n       Meteor.users.update({_id:{$in:users}}, update, {multi: true})                                      // 242\n     }                                                                                                    // 243\n   }                                                                                                      // 244\n   catch (ex) {                                                                                           // 245\n     var removeNonGroupedRoleFromGroupMsg = 'Cannot apply $pull/$pullAll modifier to non-array'           // 246\n                                                                                                          // 247\n     if (ex.name === 'MongoError' &&                                                                      // 248\n         ex.err === removeNonGroupedRoleFromGroupMsg) {                                                   // 249\n       throw new Error (mixingGroupAndNonGroupErrorMsg)                                                   // 250\n     }                                                                                                    // 251\n                                                                                                          // 252\n     throw ex                                                                                             // 253\n   }                                                                                                      // 254\n },                                                                                                       // 255\n                                                                                                          // 256\n /**                                                                                                      // 257\nCheck if user has specified permissions/roles                                                         // 258\n                                                                                                      // 259",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "user",
                    "description": "User Id or actual user object                                             // 276",
                    "type": "String|Object"
                },
                {
                    "name": "roles",
                    "description": "Name of role/permission or Array of                                       // 277\n                           roles/permissions to check against.  If array,                             // 278\n                           will return true if user is in _any_ role.                                 // 279",
                    "type": "String|Array"
                },
                {
                    "name": "group",
                    "description": "Optional. Name of group.  If supplied, limits check                           // 280\n                        to just that group.                                                           // 281\n                        The user's Roles.GLOBAL_GROUP will always be checked                          // 282\n                        whether group is specified or not.                                            // 283",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "user",
                    "description": "User Id or actual user object                                             // 373",
                    "type": "String|Object"
                },
                {
                    "name": "group",
                    "description": "Optional name of group to restrict roles to.                                  // 374\n                        User's Roles.GLOBAL_GROUP will also be included.                              // 375",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "role",
                    "description": "Name of role/permission.  If array, users                                  // 430\n                           returned will have at least one of the roles                               // 431\n                           specified but need not have _all_ roles.                                   // 432",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional name of group to restrict roles to.                                  // 433\n                        User's Roles.GLOBAL_GROUP will also be checked.                               // 434",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "user",
                    "description": "User Id or actual user object                                             // 490",
                    "type": "String|Object"
                },
                {
                    "name": "role",
                    "description": "Optional name of roles to restrict groups to.                                  // 491\n                                                                                                      // 492",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "roles",
                    "description": "// 540",
                    "type": "Array"
                },
                {
                    "name": "group",
                    "description": "// 541",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "roles",
                    "description": "// 565",
                    "type": "Array"
                },
                {
                    "name": "group",
                    "description": "// 566",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "users",
                    "description": "user id(s) or object(s) with an _id field                                 // 591",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "name(s) of roles/permissions to add users to                              // 592",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Group name. If not null or undefined, roles will be                             // 593\n                        specific to that group.                                                       // 594\n                        Group names can not start with '$'.                                           // 595\n                        Periods in names '.' are automatically converted                              // 596\n                        to underscores.                                                               // 597\n                        The special group Roles.GLOBAL_GROUP provides                                 // 598\n                        a convenient way to assign blanket roles/permissions                          // 599\n                        across all groups.  The roles/permissions in the                              // 600\n                        Roles.GLOBAL_GROUP group will be automatically                                // 601\n                        included in checks for any group.                                             // 602",
                    "type": "String"
                },
                {
                    "name": "updateFactory",
                    "description": "Func which returns an update object that                              // 603\n                        will be passed to Mongo.                                                      // 604",
                    "type": "Function"
                },
                {
                    "name": "roles",
                    "description": "// 605",
                    "type": "Array"
                },
                {
                    "name": "group",
                    "description": "// 606\n/                                                                                                      // 607\n _updateUserRoles: function (users, roles, group, updateFactory) {                                        // 608\n   if (!users) throw new Error (\"Missing 'users' param\")                                                  // 609\n   if (!roles) throw new Error (\"Missing 'roles' param\")                                                  // 610\n   if (group) {                                                                                           // 611\n     if ('string' !== typeof group)                                                                       // 612\n       throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                 // 613\n     if ('$' === group[0])                                                                                // 614\n       throw new Error (\"Roles error: groups can not start with '$'\")                                     // 615\n                                                                                                          // 616\n     // convert any periods to underscores                                                                // 617\n     group = group.replace(/\\./g, '_')                                                                    // 618\n   }                                                                                                      // 619\n                                                                                                          // 620\n   var existingRoles,                                                                                     // 621\n       query,                                                                                             // 622\n       update                                                                                             // 623\n                                                                                                          // 624\n   // ensure arrays to simplify code                                                                      // 625\n   if (!_.isArray(users)) users = [users]                                                                 // 626\n   if (!_.isArray(roles)) roles = [roles]                                                                 // 627\n                                                                                                          // 628\n   // remove invalid roles                                                                                // 629\n   roles = _.reduce(roles, function (memo, role) {                                                        // 630\n     if (role                                                                                             // 631\n         && 'string' === typeof role                                                                      // 632\n         && role.trim().length > 0) {                                                                     // 633\n       memo.push(role.trim())                                                                             // 634\n     }                                                                                                    // 635\n     return memo                                                                                          // 636\n   }, [])                                                                                                 // 637\n                                                                                                          // 638\n   // empty roles array is ok, since it might be a $set operation to clear roles                          // 639\n   //if (roles.length === 0) return                                                                       // 640\n                                                                                                          // 641\n   // ensure all roles exist in 'roles' collection                                                        // 642\n   existingRoles = _.reduce(Meteor.roles.find({}).fetch(), function (memo, role) {                        // 643\n     memo[role.name] = true                                                                               // 644\n     return memo                                                                                          // 645\n   }, {})                                                                                                 // 646\n   _.each(roles, function (role) {                                                                        // 647\n     if (!existingRoles[role]) {                                                                          // 648\n       Roles.createRole(role)                                                                             // 649\n     }                                                                                                    // 650\n   })                                                                                                     // 651\n                                                                                                          // 652\n   // ensure users is an array of user ids                                                                // 653\n   users = _.reduce(users, function (memo, user) {                                                        // 654\n     var _id                                                                                              // 655\n     if ('string' === typeof user) {                                                                      // 656\n       memo.push(user)                                                                                    // 657\n     } else if ('object' === typeof user) {                                                               // 658\n       _id = user._id                                                                                     // 659\n       if ('string' === typeof _id) {                                                                     // 660\n         memo.push(_id)                                                                                   // 661\n       }                                                                                                  // 662\n     }                                                                                                    // 663\n     return memo                                                                                          // 664\n   }, [])                                                                                                 // 665\n                                                                                                          // 666\n   // update all users                                                                                    // 667\n   update = updateFactory(roles, group)                                                                   // 668\n                                                                                                          // 669\n   try {                                                                                                  // 670\n     if (Meteor.isClient) {                                                                               // 671\n       // On client, iterate over each user to fulfill Meteor's                                           // 672\n       // 'one update per ID' policy                                                                      // 673\n       _.each(users, function (user) {                                                                    // 674\n         Meteor.users.update({_id: user}, update)                                                         // 675\n       })                                                                                                 // 676\n     } else {                                                                                             // 677\n       // On the server we can use MongoDB's $in operator for                                             // 678\n       // better performance                                                                              // 679\n       Meteor.users.update(                                                                               // 680\n         {_id: {$in: users}},                                                                             // 681\n         update,                                                                                          // 682\n         {multi: true})                                                                                   // 683\n     }                                                                                                    // 684\n   }                                                                                                      // 685\n   catch (ex) {                                                                                           // 686\n     var addNonGroupToGroupedRolesMsg = 'Cannot apply $addToSet modifier to non-array',                   // 687\n         addGrouped2NonGroupedMsg = \"can't append to array using string field name\"                       // 688\n                                                                                                          // 689\n     if (ex.name === 'MongoError' &&                                                                      // 690\n         (ex.err === addNonGroupToGroupedRolesMsg ||                                                      // 691\n          ex.err.substring(0, 45) === addGrouped2NonGroupedMsg)) {                                        // 692\n       throw new Error (mixingGroupAndNonGroupErrorMsg)                                                   // 693\n     }                                                                                                    // 694\n                                                                                                          // 695\n     throw ex                                                                                             // 696\n   }                                                                                                      // 697\n }  // end _updateUserRoles                                                                               // 698\n                                                                                                          // 699\n})  // end _.extend(Roles ...)                                                                             // 700\n                                                                                                          // 701\n}());                                                                                                      // 702\n                                                                                                          // 703\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "update object for use in MongoDB update command                                      // 567\n/                                                                                                      // 568\n _update_$addToSet_fn: function (roles, group) {                                                          // 569\n   var update = {}                                                                                        // 570\n                                                                                                          // 571\n   if (group) {                                                                                           // 572\n     // roles is a key/value dict object                                                                  // 573\n     update.$addToSet = {}                                                                                // 574\n     update.$addToSet['roles.' + group] = {$each: roles}                                                  // 575\n   } else {                                                                                               // 576\n     // roles is an array of strings                                                                      // 577\n     update.$addToSet = {roles: {$each: roles}}                                                           // 578\n   }                                                                                                      // 579\n                                                                                                          // 580\n   return update                                                                                          // 581\n },  // end _update_$addToSet_fn                                                                          // 582\n                                                                                                          // 583\n                                                                                                          // 584\n /**                                                                                                      // 585\nInternal function that users the Template pattern to adds or sets roles                               // 586\nfor users.                                                                                            // 587\n                                                                                                      // 588",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "// 590"
        },
        "Roles                                                                                                   // 6\n/                                                                                                                // 7\n                                                                                                                  // 8\n/**                                                                                                                // 9\nRoles collection documents consist only of an id and a role name.                                               // 10\n  ex: { _id:<uuid>, name: \"admin\" }                                                                             // 11\n/                                                                                                                // 12\nif (!Meteor.roles) {                                                                                               // 13\n Meteor.roles = new Meteor.Collection(\"roles\")                                                                    // 14\n}                                                                                                                  // 15\n                                                                                                                  // 16\n/**                                                                                                                // 17\nRole-based authorization compatible with built-in Meteor accounts package.                                      // 18\n                                                                                                                // 19\nStores user's current roles in a 'roles' field on the user object.                                              // 20\n                                                                                                                // 21": {
            "name": "Roles                                                                                                   // 6\n/                                                                                                                // 7\n                                                                                                                  // 8\n/**                                                                                                                // 9\nRoles collection documents consist only of an id and a role name.                                               // 10\n  ex: { _id:<uuid>, name: \"admin\" }                                                                             // 11\n/                                                                                                                // 12\nif (!Meteor.roles) {                                                                                               // 13\n Meteor.roles = new Meteor.Collection(\"roles\")                                                                    // 14\n}                                                                                                                  // 15\n                                                                                                                  // 16\n/**                                                                                                                // 17\nRole-based authorization compatible with built-in Meteor accounts package.                                      // 18\n                                                                                                                // 19\nStores user's current roles in a 'roles' field on the user object.                                              // 20\n                                                                                                                // 21",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "roles/.build.alanning:roles/web.cordova/packages/alanning:roles.js",
            "line": 11,
            "description": "Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.            // 4\n                                                                                                                // 5",
            "is_constructor": 1,
            "example": [
                "                                                                                                      // 39\n    Roles.addUsersToRoles(user, 'admin', Roles.GLOBAL_GROUP)                                                  // 40\n    Roles.userIsInRole(user, 'admin') // => true                                                              // 41\n                                                                                                              // 42\n    Roles.setUserRoles(user, 'support-staff', Roles.GLOBAL_GROUP)                                             // 43\n    Roles.userIsInRole(user, 'support-staff') // => true                                                      // 44\n    Roles.userIsInRole(user, 'admin') // => false                                                             // 45\n                                                                                                              // 46",
                "                                                                                                      // 122\n    Roles.addUsersToRoles(userId, 'admin')                                                                    // 123\n    Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')                                            // 124\n    Roles.addUsersToRoles([user1, user2], ['user','editor'])                                                  // 125\n    Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')                // 126\n    Roles.addUsersToRoles(userId, 'admin', Roles.GLOBAL_GROUP)                                                // 127\n                                                                                                              // 128",
                "                                                                                                      // 151\n    Roles.setUserRoles(userId, 'admin')                                                                       // 152\n    Roles.setUserRoles(userId, ['view-secrets'], 'example.com')                                               // 153\n    Roles.setUserRoles([user1, user2], ['user','editor'])                                                     // 154\n    Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')                   // 155\n    Roles.setUserRoles(userId, 'admin', Roles.GLOBAL_GROUP)                                                   // 156\n                                                                                                              // 157",
                "                                                                                                      // 180\n    Roles.removeUsersFromRoles(users.bob, 'admin')                                                            // 181\n    Roles.removeUsersFromRoles([users.bob, users.joe], ['editor'])                                            // 182\n    Roles.removeUsersFromRoles([users.bob, users.joe], ['editor', 'user'])                                    // 183\n    Roles.removeUsersFromRoles(users.eve, ['user'], 'group1')                                                 // 184\n                                                                                                              // 185",
                "                                                                                                      // 260\n    // non-group usage                                                                                        // 261\n    Roles.userIsInRole(user, 'admin')                                                                         // 262\n    Roles.userIsInRole(user, ['admin','editor'])                                                              // 263\n    Roles.userIsInRole(userId, 'admin')                                                                       // 264\n    Roles.userIsInRole(userId, ['admin','editor'])                                                            // 265\n                                                                                                              // 266\n    // per-group usage                                                                                        // 267\n    Roles.userIsInRole(user,   ['admin','editor'], 'group1')                                                  // 268\n    Roles.userIsInRole(userId, ['admin','editor'], 'group1')                                                  // 269\n    Roles.userIsInRole(userId, ['admin','editor'], Roles.GLOBAL_GROUP)                                        // 270\n                                                                                                              // 271\n    // this format can also be used as short-hand for Roles.GLOBAL_GROUP                                      // 272\n    Roles.userIsInRole(user, 'admin')                                                                         // 273\n                                                                                                              // 274",
                "                                                                                                      // 27\n    {{#if isInRole 'admin'}}                                                                                  // 28\n    {{/if}}                                                                                                   // 29\n                                                                                                              // 30\n    {{#if isInRole 'editor,user'}}                                                                            // 31\n    {{/if}}                                                                                                   // 32\n                                                                                                              // 33\n    {{#if isInRole 'editor,user' 'group1'}}                                                                   // 34\n    {{/if}}                                                                                                   // 35\n                                                                                                              // 36"
            ],
            "itemtype": "method",
            "type": "String                                                                                                  // 48",
            "static": "// 41",
            "final": "// 50\n/                                                                                                              // 51\n GLOBAL_GROUP: '__global_roles__',                                                                                // 52\n                                                                                                                  // 53\n                                                                                                                  // 54\n /**                                                                                                              // 55\nCreate a new role. Whitespace will be trimmed.                                                                // 56\n                                                                                                              // 57",
            "params": [
                {
                    "name": "role",
                    "description": "Name of role                                                                             // 59",
                    "type": "String"
                },
                {
                    "name": "role",
                    "description": "Name of role                                                                             // 93\n/                                                                                                              // 94\n deleteRole: function (role) {                                                                                    // 95\n   if (!role) return                                                                                              // 96\n                                                                                                                  // 97\n   var foundExistingUser = Meteor.users.findOne(                                                                  // 98\n                             {roles: {$in: [role]}},                                                              // 99\n                             {fields: {_id: 1}})                                                                  // 100\n                                                                                                                  // 101\n   if (foundExistingUser) {                                                                                       // 102\n     throw new Meteor.Error(403, 'Role in use')                                                                   // 103\n   }                                                                                                              // 104\n                                                                                                                  // 105\n   var thisRole = Meteor.roles.findOne({name: role})                                                              // 106\n   if (thisRole) {                                                                                                // 107\n     Meteor.roles.remove({_id: thisRole._id})                                                                     // 108\n   }                                                                                                              // 109\n },                                                                                                               // 110\n                                                                                                                  // 111\n /**                                                                                                              // 112\nAdd users to roles. Will create roles as needed.                                                              // 113\n                                                                                                              // 114\nNOTE: Mixing grouped and non-grouped roles for the same user                                                  // 115\n      is not supported and will throw an error.                                                               // 116\n                                                                                                              // 117\nMakes 2 calls to database:                                                                                    // 118\n 1. retrieve list of all existing roles                                                                       // 119\n 2. update users' roles                                                                                       // 120\n                                                                                                              // 121",
                    "type": "String"
                },
                {
                    "name": "users",
                    "description": "User id(s) or object(s) with an _id field                                         // 130",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles/permissions to add users to                                      // 131",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional group name. If supplied, roles will be                                       // 132\n                        specific to that group.                                                               // 133\n                        Group names can not start with '$' or numbers.                                        // 134\n                        Periods in names '.' are automatically converted                                      // 135\n                        to underscores.                                                                       // 136\n                        The special group Roles.GLOBAL_GROUP provides                                         // 137\n                        a convenient way to assign blanket roles/permissions                                  // 138\n                        across all groups.  The roles/permissions in the                                      // 139\n                        Roles.GLOBAL_GROUP group will be automatically                                        // 140\n                        included in checks for any group.                                                     // 141\n/                                                                                                              // 142\n addUsersToRoles: function (users, roles, group) {                                                                // 143\n   // use Template pattern to update user roles                                                                   // 144\n   Roles._updateUserRoles(users, roles, group, Roles._update_$addToSet_fn)                                        // 145\n },                                                                                                               // 146\n                                                                                                                  // 147\n /**                                                                                                              // 148\nSet a users roles/permissions.                                                                                // 149\n                                                                                                              // 150",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "users",
                    "description": "User id(s) or object(s) with an _id field                                         // 159",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles/permissions to add users to                                      // 160",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional group name. If supplied, roles will be                                       // 161\n                        specific to that group.                                                               // 162\n                        Group names can not start with '$'.                                                   // 163\n                        Periods in names '.' are automatically converted                                      // 164\n                        to underscores.                                                                       // 165\n                        The special group Roles.GLOBAL_GROUP provides                                         // 166\n                        a convenient way to assign blanket roles/permissions                                  // 167\n                        across all groups.  The roles/permissions in the                                      // 168\n                        Roles.GLOBAL_GROUP group will be automatically                                        // 169\n                        included in checks for any group.                                                     // 170\n/                                                                                                              // 171\n setUserRoles: function (users, roles, group) {                                                                   // 172\n   // use Template pattern to update user roles                                                                   // 173\n   Roles._updateUserRoles(users, roles, group, Roles._update_$set_fn)                                             // 174\n },                                                                                                               // 175\n                                                                                                                  // 176\n /**                                                                                                              // 177\nRemove users from roles                                                                                       // 178\n                                                                                                              // 179",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "users",
                    "description": "User id(s) or object(s) with an _id field                                         // 187",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to add users to                                                  // 188",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional. Group name. If supplied, only that                                          // 189\n                        group will have roles removed.                                                        // 190\n/                                                                                                              // 191\n removeUsersFromRoles: function (users, roles, group) {                                                           // 192\n   var update                                                                                                     // 193\n                                                                                                                  // 194\n   if (!users) throw new Error (\"Missing 'users' param\")                                                          // 195\n   if (!roles) throw new Error (\"Missing 'roles' param\")                                                          // 196\n   if (group) {                                                                                                   // 197\n     if ('string' !== typeof group)                                                                               // 198\n       throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                         // 199\n     if ('$' === group[0])                                                                                        // 200\n       throw new Error (\"Roles error: groups can not start with '$'\")                                             // 201\n                                                                                                                  // 202\n     // convert any periods to underscores                                                                        // 203\n     group = group.replace(/\\./g, '_')                                                                            // 204\n   }                                                                                                              // 205\n                                                                                                                  // 206\n   // ensure arrays                                                                                               // 207\n   if (!_.isArray(users)) users = [users]                                                                         // 208\n   if (!_.isArray(roles)) roles = [roles]                                                                         // 209\n                                                                                                                  // 210\n   // ensure users is an array of user ids                                                                        // 211\n   users = _.reduce(users, function (memo, user) {                                                                // 212\n     var _id                                                                                                      // 213\n     if ('string' === typeof user) {                                                                              // 214\n       memo.push(user)                                                                                            // 215\n     } else if ('object' === typeof user) {                                                                       // 216\n       _id = user._id                                                                                             // 217\n       if ('string' === typeof _id) {                                                                             // 218\n         memo.push(_id)                                                                                           // 219\n       }                                                                                                          // 220\n     }                                                                                                            // 221\n     return memo                                                                                                  // 222\n   }, [])                                                                                                         // 223\n                                                                                                                  // 224\n   // update all users, remove from roles set                                                                     // 225\n                                                                                                                  // 226\n   if (group) {                                                                                                   // 227\n     update = {$pullAll: {}}                                                                                      // 228\n     update.$pullAll['roles.'+group] = roles                                                                      // 229\n   } else {                                                                                                       // 230\n     update = {$pullAll: {roles: roles}}                                                                          // 231\n   }                                                                                                              // 232\n                                                                                                                  // 233\n   try {                                                                                                          // 234\n     if (Meteor.isClient) {                                                                                       // 235\n       // Iterate over each user to fulfill Meteor's 'one update per ID' policy                                   // 236\n       _.each(users, function (user) {                                                                            // 237\n         Meteor.users.update({_id:user}, update)                                                                  // 238\n       })                                                                                                         // 239\n     } else {                                                                                                     // 240\n       // On the server we can leverage MongoDB's $in operator for performance                                    // 241\n       Meteor.users.update({_id:{$in:users}}, update, {multi: true})                                              // 242\n     }                                                                                                            // 243\n   }                                                                                                              // 244\n   catch (ex) {                                                                                                   // 245\n     var removeNonGroupedRoleFromGroupMsg = 'Cannot apply $pull/$pullAll modifier to non-array'                   // 246\n                                                                                                                  // 247\n     if (ex.name === 'MongoError' &&                                                                              // 248\n         ex.err === removeNonGroupedRoleFromGroupMsg) {                                                           // 249\n       throw new Error (mixingGroupAndNonGroupErrorMsg)                                                           // 250\n     }                                                                                                            // 251\n                                                                                                                  // 252\n     throw ex                                                                                                     // 253\n   }                                                                                                              // 254\n },                                                                                                               // 255\n                                                                                                                  // 256\n /**                                                                                                              // 257\nCheck if user has specified permissions/roles                                                                 // 258\n                                                                                                              // 259",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "user",
                    "description": "User Id or actual user object                                                     // 276",
                    "type": "String|Object"
                },
                {
                    "name": "roles",
                    "description": "Name of role/permission or Array of                                               // 277\n                           roles/permissions to check against.  If array,                                     // 278\n                           will return true if user is in _any_ role.                                         // 279",
                    "type": "String|Array"
                },
                {
                    "name": "group",
                    "description": "Optional. Name of group.  If supplied, limits check                                   // 280\n                        to just that group.                                                                   // 281\n                        The user's Roles.GLOBAL_GROUP will always be checked                                  // 282\n                        whether group is specified or not.                                                    // 283",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "user",
                    "description": "User Id or actual user object                                                     // 373",
                    "type": "String|Object"
                },
                {
                    "name": "group",
                    "description": "Optional name of group to restrict roles to.                                          // 374\n                        User's Roles.GLOBAL_GROUP will also be included.                                      // 375",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "role",
                    "description": "Name of role/permission.  If array, users                                          // 430\n                           returned will have at least one of the roles                                       // 431\n                           specified but need not have _all_ roles.                                           // 432",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional name of group to restrict roles to.                                          // 433\n                        User's Roles.GLOBAL_GROUP will also be checked.                                       // 434",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "user",
                    "description": "User Id or actual user object                                                     // 490",
                    "type": "String|Object"
                },
                {
                    "name": "role",
                    "description": "Optional name of roles to restrict groups to.                                          // 491\n                                                                                                              // 492",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "roles",
                    "description": "// 540",
                    "type": "Array"
                },
                {
                    "name": "group",
                    "description": "// 541",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "roles",
                    "description": "// 565",
                    "type": "Array"
                },
                {
                    "name": "group",
                    "description": "// 566",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "users",
                    "description": "user id(s) or object(s) with an _id field                                         // 591",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "name(s) of roles/permissions to add users to                                      // 592",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Group name. If not null or undefined, roles will be                                     // 593\n                        specific to that group.                                                               // 594\n                        Group names can not start with '$'.                                                   // 595\n                        Periods in names '.' are automatically converted                                      // 596\n                        to underscores.                                                                       // 597\n                        The special group Roles.GLOBAL_GROUP provides                                         // 598\n                        a convenient way to assign blanket roles/permissions                                  // 599\n                        across all groups.  The roles/permissions in the                                      // 600\n                        Roles.GLOBAL_GROUP group will be automatically                                        // 601\n                        included in checks for any group.                                                     // 602",
                    "type": "String"
                },
                {
                    "name": "updateFactory",
                    "description": "Func which returns an update object that                                      // 603\n                        will be passed to Mongo.                                                              // 604",
                    "type": "Function"
                },
                {
                    "name": "roles",
                    "description": "// 605",
                    "type": "Array"
                },
                {
                    "name": "group",
                    "description": "// 606\n/                                                                                                              // 607\n _updateUserRoles: function (users, roles, group, updateFactory) {                                                // 608\n   if (!users) throw new Error (\"Missing 'users' param\")                                                          // 609\n   if (!roles) throw new Error (\"Missing 'roles' param\")                                                          // 610\n   if (group) {                                                                                                   // 611\n     if ('string' !== typeof group)                                                                               // 612\n       throw new Error (\"Roles error: Invalid parameter 'group'. Expected 'string' type\")                         // 613\n     if ('$' === group[0])                                                                                        // 614\n       throw new Error (\"Roles error: groups can not start with '$'\")                                             // 615\n                                                                                                                  // 616\n     // convert any periods to underscores                                                                        // 617\n     group = group.replace(/\\./g, '_')                                                                            // 618\n   }                                                                                                              // 619\n                                                                                                                  // 620\n   var existingRoles,                                                                                             // 621\n       query,                                                                                                     // 622\n       update                                                                                                     // 623\n                                                                                                                  // 624\n   // ensure arrays to simplify code                                                                              // 625\n   if (!_.isArray(users)) users = [users]                                                                         // 626\n   if (!_.isArray(roles)) roles = [roles]                                                                         // 627\n                                                                                                                  // 628\n   // remove invalid roles                                                                                        // 629\n   roles = _.reduce(roles, function (memo, role) {                                                                // 630\n     if (role                                                                                                     // 631\n         && 'string' === typeof role                                                                              // 632\n         && role.trim().length > 0) {                                                                             // 633\n       memo.push(role.trim())                                                                                     // 634\n     }                                                                                                            // 635\n     return memo                                                                                                  // 636\n   }, [])                                                                                                         // 637\n                                                                                                                  // 638\n   // empty roles array is ok, since it might be a $set operation to clear roles                                  // 639\n   //if (roles.length === 0) return                                                                               // 640\n                                                                                                                  // 641\n   // ensure all roles exist in 'roles' collection                                                                // 642\n   existingRoles = _.reduce(Meteor.roles.find({}).fetch(), function (memo, role) {                                // 643\n     memo[role.name] = true                                                                                       // 644\n     return memo                                                                                                  // 645\n   }, {})                                                                                                         // 646\n   _.each(roles, function (role) {                                                                                // 647\n     if (!existingRoles[role]) {                                                                                  // 648\n       Roles.createRole(role)                                                                                     // 649\n     }                                                                                                            // 650\n   })                                                                                                             // 651\n                                                                                                                  // 652\n   // ensure users is an array of user ids                                                                        // 653\n   users = _.reduce(users, function (memo, user) {                                                                // 654\n     var _id                                                                                                      // 655\n     if ('string' === typeof user) {                                                                              // 656\n       memo.push(user)                                                                                            // 657\n     } else if ('object' === typeof user) {                                                                       // 658\n       _id = user._id                                                                                             // 659\n       if ('string' === typeof _id) {                                                                             // 660\n         memo.push(_id)                                                                                           // 661\n       }                                                                                                          // 662\n     }                                                                                                            // 663\n     return memo                                                                                                  // 664\n   }, [])                                                                                                         // 665\n                                                                                                                  // 666\n   // update all users                                                                                            // 667\n   update = updateFactory(roles, group)                                                                           // 668\n                                                                                                                  // 669\n   try {                                                                                                          // 670\n     if (Meteor.isClient) {                                                                                       // 671\n       // On client, iterate over each user to fulfill Meteor's                                                   // 672\n       // 'one update per ID' policy                                                                              // 673\n       _.each(users, function (user) {                                                                            // 674\n         Meteor.users.update({_id: user}, update)                                                                 // 675\n       })                                                                                                         // 676\n     } else {                                                                                                     // 677\n       // On the server we can use MongoDB's $in operator for                                                     // 678\n       // better performance                                                                                      // 679\n       Meteor.users.update(                                                                                       // 680\n         {_id: {$in: users}},                                                                                     // 681\n         update,                                                                                                  // 682\n         {multi: true})                                                                                           // 683\n     }                                                                                                            // 684\n   }                                                                                                              // 685\n   catch (ex) {                                                                                                   // 686\n     var addNonGroupToGroupedRolesMsg = 'Cannot apply $addToSet modifier to non-array',                           // 687\n         addGrouped2NonGroupedMsg = \"can't append to array using string field name\"                               // 688\n                                                                                                                  // 689\n     if (ex.name === 'MongoError' &&                                                                              // 690\n         (ex.err === addNonGroupToGroupedRolesMsg ||                                                              // 691\n          ex.err.substring(0, 45) === addGrouped2NonGroupedMsg)) {                                                // 692\n       throw new Error (mixingGroupAndNonGroupErrorMsg)                                                           // 693\n     }                                                                                                            // 694\n                                                                                                                  // 695\n     throw ex                                                                                                     // 696\n   }                                                                                                              // 697\n }  // end _updateUserRoles                                                                                       // 698\n                                                                                                                  // 699\n})  // end _.extend(Roles ...)                                                                                     // 700\n                                                                                                                  // 701\n}());                                                                                                              // 702\n                                                                                                                  // 703\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/alanning:roles/roles_client.js                                                                         //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n;(function () {                                                                                                    // 1\n                                                                                                                  // 2\n/**                                                                                                                // 3\nConvenience functions for use on client.                                                                        // 4\n                                                                                                                // 5\nNOTE: You must restrict user actions on the server-side; any                                                    // 6\nclient-side checks are strictly for convenience and must not be                                                 // 7\ntrusted.                                                                                                        // 8\n                                                                                                                // 9",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "role",
                    "description": "Name of role or comma-seperated list of roles                                            // 38",
                    "type": "String"
                },
                {
                    "name": "group",
                    "description": "Optional, name of group to check                                                      // 39",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if current user is in at least one of the target roles                                 // 40",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "// 590"
        },
        "UIHelpers                                                                                               // 10\n/                                                                                                                // 11\n                                                                                                                  // 12\n////////////////////////////////////////////////////////////                                                       // 13\n// UI helpers                                                                                                      // 14\n//                                                                                                                 // 15\n// Use a semi-private variable rather than declaring UI                                                            // 16\n// helpers directly so that we can unit test the helpers.                                                          // 17\n// XXX For some reason, the UI helpers are not registered                                                          // 18\n// before the tests run.                                                                                           // 19\n//                                                                                                                 // 20\nRoles._uiHelpers = {                                                                                               // 21\n                                                                                                                  // 22\n /**                                                                                                              // 23\nUI helper to check if current user is in at least one                                                         // 24\nof the target roles.  For use in client-side templates.                                                       // 25\n                                                                                                              // 26": {
            "name": "UIHelpers                                                                                               // 10\n/                                                                                                                // 11\n                                                                                                                  // 12\n////////////////////////////////////////////////////////////                                                       // 13\n// UI helpers                                                                                                      // 14\n//                                                                                                                 // 15\n// Use a semi-private variable rather than declaring UI                                                            // 16\n// helpers directly so that we can unit test the helpers.                                                          // 17\n// XXX For some reason, the UI helpers are not registered                                                          // 18\n// before the tests run.                                                                                           // 19\n//                                                                                                                 // 20\nRoles._uiHelpers = {                                                                                               // 21\n                                                                                                                  // 22\n /**                                                                                                              // 23\nUI helper to check if current user is in at least one                                                         // 24\nof the target roles.  For use in client-side templates.                                                       // 25\n                                                                                                              // 26",
            "submodules": {
                "undefined": 1
            },
            "classes": {
                "Roles                                                                                                    // 22": 1,
                "UIHelpers                                                                                                // 42\n/                                                                                                              // 43\n isInRole: function (role, group) {                                                                               // 44\n   var user = Meteor.user(),                                                                                      // 45\n       comma = (role || '').indexOf(','),                                                                         // 46\n       roles                                                                                                      // 47\n                                                                                                                  // 48\n   if (!user) return false                                                                                        // 49\n   if (!Match.test(role, String)) return false                                                                    // 50\n                                                                                                                  // 51\n   if (comma !== -1) {                                                                                            // 52\n     roles = _.reduce(role.split(','), function (memo, r) {                                                       // 53\n       if (!r || !r.trim()) {                                                                                     // 54\n         return memo                                                                                              // 55\n       }                                                                                                          // 56\n       memo.push(r.trim())                                                                                        // 57\n       return memo                                                                                                // 58\n     }, [])                                                                                                       // 59\n   } else {                                                                                                       // 60\n     roles = [role]                                                                                               // 61\n   }                                                                                                              // 62\n                                                                                                                  // 63\n   if (Match.test(group, String)) {                                                                               // 64\n     return Roles.userIsInRole(user, roles, group)                                                                // 65\n   }                                                                                                              // 66\n                                                                                                                  // 67\n   return Roles.userIsInRole(user, roles)                                                                         // 68\n }                                                                                                                // 69\n}                                                                                                                  // 70\n                                                                                                                  // 71\nif (Package.ui) {                                                                                                  // 72\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 73\n   Package.ui.UI.registerHelper(name, func)                                                                       // 74\n })                                                                                                               // 75\n} else if (Package.handlebars) {                                                                                   // 76\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 77\n   Package.handlebars.Handlebars.registerHelper(name, func)                                                       // 78\n })                                                                                                               // 79\n} else {                                                                                                           // 80\n console.log && console.log('WARNING: Roles template helpers not registered. Handlebars or UI package not found') // 81\n}                                                                                                                  // 82\n                                                                                                                  // 83\n}());                                                                                                              // 84\n                                                                                                                  // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);": 1
            },
            "fors": {
                "UIHelpers                                                                                                // 42\n/                                                                                                              // 43\n isInRole: function (role, group) {                                                                               // 44\n   var user = Meteor.user(),                                                                                      // 45\n       comma = (role || '').indexOf(','),                                                                         // 46\n       roles                                                                                                      // 47\n                                                                                                                  // 48\n   if (!user) return false                                                                                        // 49\n   if (!Match.test(role, String)) return false                                                                    // 50\n                                                                                                                  // 51\n   if (comma !== -1) {                                                                                            // 52\n     roles = _.reduce(role.split(','), function (memo, r) {                                                       // 53\n       if (!r || !r.trim()) {                                                                                     // 54\n         return memo                                                                                              // 55\n       }                                                                                                          // 56\n       memo.push(r.trim())                                                                                        // 57\n       return memo                                                                                                // 58\n     }, [])                                                                                                       // 59\n   } else {                                                                                                       // 60\n     roles = [role]                                                                                               // 61\n   }                                                                                                              // 62\n                                                                                                                  // 63\n   if (Match.test(group, String)) {                                                                               // 64\n     return Roles.userIsInRole(user, roles, group)                                                                // 65\n   }                                                                                                              // 66\n                                                                                                                  // 67\n   return Roles.userIsInRole(user, roles)                                                                         // 68\n }                                                                                                                // 69\n}                                                                                                                  // 70\n                                                                                                                  // 71\nif (Package.ui) {                                                                                                  // 72\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 73\n   Package.ui.UI.registerHelper(name, func)                                                                       // 74\n })                                                                                                               // 75\n} else if (Package.handlebars) {                                                                                   // 76\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 77\n   Package.handlebars.Handlebars.registerHelper(name, func)                                                       // 78\n })                                                                                                               // 79\n} else {                                                                                                           // 80\n console.log && console.log('WARNING: Roles template helpers not registered. Handlebars or UI package not found') // 81\n}                                                                                                                  // 82\n                                                                                                                  // 83\n}());                                                                                                              // 84\n                                                                                                                  // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "roles/.build.alanning:roles/web.cordova/packages/alanning:roles.js",
            "line": 11,
            "description": "Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.            // 4\n                                                                                                                // 5"
        },
        "UIHelpers": {
            "name": "UIHelpers",
            "submodules": {},
            "classes": {
                "UIHelpers": 1
            },
            "fors": {
                "UIHelpers": 1
            },
            "namespaces": {},
            "tag": "module",
            "file": "roles/roles_client.js",
            "line": 3,
            "description": "Convenience functions for use on client.\n\nNOTE: You must restrict user actions on the server-side; any\nclient-side checks are strictly for convenience and must not be\ntrusted."
        },
        "Roles": {
            "name": "Roles",
            "submodules": {},
            "classes": {
                "Roles": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "roles/roles_common.js",
            "line": 17,
            "description": "Provides functions related to user authorization. Compatible with built-in Meteor accounts packages."
        }
    },
    "classes": {
        "Roles                                                                                            // 22": {
            "name": "Roles                                                                                            // 22",
            "shortname": "Roles                                                                                            // 22",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Roles                                                                                           // 6\n/                                                                                                        // 7\n                                                                                                          // 8\n/**                                                                                                        // 9\nRoles collection documents consist only of an id and a role name.                                       // 10\n  ex: { _id:<uuid>, name: \"admin\" }                                                                     // 11\n/                                                                                                        // 12\nif (!Meteor.roles) {                                                                                       // 13\n Meteor.roles = new Meteor.Collection(\"roles\")                                                            // 14\n}                                                                                                          // 15\n                                                                                                          // 16\n/**                                                                                                        // 17\nRole-based authorization compatible with built-in Meteor accounts package.                              // 18\n                                                                                                        // 19\nStores user's current roles in a 'roles' field on the user object.                                      // 20\n                                                                                                        // 21",
            "namespace": "",
            "file": "roles/.build.alanning:roles/os/packages/alanning:roles.js",
            "line": 12,
            "description": "Roles collection documents consist only of an id and a role name.                                       // 5\n  ex: { _id:<uuid>, name: \"admin\" }                                                                     // 6\n/                                                                                                        // 7\nif (!Meteor.roles) {                                                                                       // 8\n Meteor.roles = new Meteor.Collection(\"roles\")                                                            // 9\n                                                                                                          // 10\n // Create default indexes for roles collection                                                           // 11\n Meteor.roles._ensureIndex('name', {unique: 1})                                                           // 12\n}                                                                                                          // 13\n                                                                                                          // 14\n                                                                                                          // 15\n/**                                                                                                        // 16\nAlways publish logged-in user's roles so client-side                                                    // 17\nchecks can work.                                                                                        // 18\n/                                                                                                        // 19\nMeteor.publish(null, function () {                                                                         // 20\n var userId = this.userId,                                                                                // 21\n     fields = {roles:1}                                                                                   // 22\n                                                                                                          // 23\n return Meteor.users.find({_id:userId}, {fields: fields})                                                 // 24\n})                                                                                                         // 25\n                                                                                                          // 26\n}());                                                                                                      // 27\n                                                                                                          // 28\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/alanning:roles/roles_common.js                                                                 //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n;(function () {                                                                                            // 1\n                                                                                                          // 2\n/**                                                                                                        // 3\nProvides functions related to user authorization. Compatible with built-in Meteor accounts packages.    // 4\n                                                                                                        // 5"
        },
        "Roles                                                                                                    // 22": {
            "name": "Roles                                                                                                    // 22",
            "shortname": "Roles                                                                                                    // 22",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UIHelpers                                                                                               // 10\n/                                                                                                                // 11\n                                                                                                                  // 12\n////////////////////////////////////////////////////////////                                                       // 13\n// UI helpers                                                                                                      // 14\n//                                                                                                                 // 15\n// Use a semi-private variable rather than declaring UI                                                            // 16\n// helpers directly so that we can unit test the helpers.                                                          // 17\n// XXX For some reason, the UI helpers are not registered                                                          // 18\n// before the tests run.                                                                                           // 19\n//                                                                                                                 // 20\nRoles._uiHelpers = {                                                                                               // 21\n                                                                                                                  // 22\n /**                                                                                                              // 23\nUI helper to check if current user is in at least one                                                         // 24\nof the target roles.  For use in client-side templates.                                                       // 25\n                                                                                                              // 26",
            "namespace": "",
            "file": "roles/.build.alanning:roles/web.cordova/packages/alanning:roles.js",
            "line": 11,
            "description": "Provides functions related to user authorization. Compatible with built-in Meteor accounts packages.            // 4\n                                                                                                                // 5"
        },
        "UIHelpers                                                                                                // 42\n/                                                                                                              // 43\n isInRole: function (role, group) {                                                                               // 44\n   var user = Meteor.user(),                                                                                      // 45\n       comma = (role || '').indexOf(','),                                                                         // 46\n       roles                                                                                                      // 47\n                                                                                                                  // 48\n   if (!user) return false                                                                                        // 49\n   if (!Match.test(role, String)) return false                                                                    // 50\n                                                                                                                  // 51\n   if (comma !== -1) {                                                                                            // 52\n     roles = _.reduce(role.split(','), function (memo, r) {                                                       // 53\n       if (!r || !r.trim()) {                                                                                     // 54\n         return memo                                                                                              // 55\n       }                                                                                                          // 56\n       memo.push(r.trim())                                                                                        // 57\n       return memo                                                                                                // 58\n     }, [])                                                                                                       // 59\n   } else {                                                                                                       // 60\n     roles = [role]                                                                                               // 61\n   }                                                                                                              // 62\n                                                                                                                  // 63\n   if (Match.test(group, String)) {                                                                               // 64\n     return Roles.userIsInRole(user, roles, group)                                                                // 65\n   }                                                                                                              // 66\n                                                                                                                  // 67\n   return Roles.userIsInRole(user, roles)                                                                         // 68\n }                                                                                                                // 69\n}                                                                                                                  // 70\n                                                                                                                  // 71\nif (Package.ui) {                                                                                                  // 72\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 73\n   Package.ui.UI.registerHelper(name, func)                                                                       // 74\n })                                                                                                               // 75\n} else if (Package.handlebars) {                                                                                   // 76\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 77\n   Package.handlebars.Handlebars.registerHelper(name, func)                                                       // 78\n })                                                                                                               // 79\n} else {                                                                                                           // 80\n console.log && console.log('WARNING: Roles template helpers not registered. Handlebars or UI package not found') // 81\n}                                                                                                                  // 82\n                                                                                                                  // 83\n}());                                                                                                              // 84\n                                                                                                                  // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);": {
            "name": "UIHelpers                                                                                                // 42\n/                                                                                                              // 43\n isInRole: function (role, group) {                                                                               // 44\n   var user = Meteor.user(),                                                                                      // 45\n       comma = (role || '').indexOf(','),                                                                         // 46\n       roles                                                                                                      // 47\n                                                                                                                  // 48\n   if (!user) return false                                                                                        // 49\n   if (!Match.test(role, String)) return false                                                                    // 50\n                                                                                                                  // 51\n   if (comma !== -1) {                                                                                            // 52\n     roles = _.reduce(role.split(','), function (memo, r) {                                                       // 53\n       if (!r || !r.trim()) {                                                                                     // 54\n         return memo                                                                                              // 55\n       }                                                                                                          // 56\n       memo.push(r.trim())                                                                                        // 57\n       return memo                                                                                                // 58\n     }, [])                                                                                                       // 59\n   } else {                                                                                                       // 60\n     roles = [role]                                                                                               // 61\n   }                                                                                                              // 62\n                                                                                                                  // 63\n   if (Match.test(group, String)) {                                                                               // 64\n     return Roles.userIsInRole(user, roles, group)                                                                // 65\n   }                                                                                                              // 66\n                                                                                                                  // 67\n   return Roles.userIsInRole(user, roles)                                                                         // 68\n }                                                                                                                // 69\n}                                                                                                                  // 70\n                                                                                                                  // 71\nif (Package.ui) {                                                                                                  // 72\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 73\n   Package.ui.UI.registerHelper(name, func)                                                                       // 74\n })                                                                                                               // 75\n} else if (Package.handlebars) {                                                                                   // 76\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 77\n   Package.handlebars.Handlebars.registerHelper(name, func)                                                       // 78\n })                                                                                                               // 79\n} else {                                                                                                           // 80\n console.log && console.log('WARNING: Roles template helpers not registered. Handlebars or UI package not found') // 81\n}                                                                                                                  // 82\n                                                                                                                  // 83\n}());                                                                                                              // 84\n                                                                                                                  // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);",
            "shortname": "UIHelpers                                                                                                // 42\n/                                                                                                              // 43\n isInRole: function (role, group) {                                                                               // 44\n   var user = Meteor.user(),                                                                                      // 45\n       comma = (role || '').indexOf(','),                                                                         // 46\n       roles                                                                                                      // 47\n                                                                                                                  // 48\n   if (!user) return false                                                                                        // 49\n   if (!Match.test(role, String)) return false                                                                    // 50\n                                                                                                                  // 51\n   if (comma !== -1) {                                                                                            // 52\n     roles = _.reduce(role.split(','), function (memo, r) {                                                       // 53\n       if (!r || !r.trim()) {                                                                                     // 54\n         return memo                                                                                              // 55\n       }                                                                                                          // 56\n       memo.push(r.trim())                                                                                        // 57\n       return memo                                                                                                // 58\n     }, [])                                                                                                       // 59\n   } else {                                                                                                       // 60\n     roles = [role]                                                                                               // 61\n   }                                                                                                              // 62\n                                                                                                                  // 63\n   if (Match.test(group, String)) {                                                                               // 64\n     return Roles.userIsInRole(user, roles, group)                                                                // 65\n   }                                                                                                              // 66\n                                                                                                                  // 67\n   return Roles.userIsInRole(user, roles)                                                                         // 68\n }                                                                                                                // 69\n}                                                                                                                  // 70\n                                                                                                                  // 71\nif (Package.ui) {                                                                                                  // 72\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 73\n   Package.ui.UI.registerHelper(name, func)                                                                       // 74\n })                                                                                                               // 75\n} else if (Package.handlebars) {                                                                                   // 76\n _.each(Roles._uiHelpers, function (func, name) {                                                                 // 77\n   Package.handlebars.Handlebars.registerHelper(name, func)                                                       // 78\n })                                                                                                               // 79\n} else {                                                                                                           // 80\n console.log && console.log('WARNING: Roles template helpers not registered. Handlebars or UI package not found') // 81\n}                                                                                                                  // 82\n                                                                                                                  // 83\n}());                                                                                                              // 84\n                                                                                                                  // 85\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UIHelpers                                                                                               // 10\n/                                                                                                                // 11\n                                                                                                                  // 12\n////////////////////////////////////////////////////////////                                                       // 13\n// UI helpers                                                                                                      // 14\n//                                                                                                                 // 15\n// Use a semi-private variable rather than declaring UI                                                            // 16\n// helpers directly so that we can unit test the helpers.                                                          // 17\n// XXX For some reason, the UI helpers are not registered                                                          // 18\n// before the tests run.                                                                                           // 19\n//                                                                                                                 // 20\nRoles._uiHelpers = {                                                                                               // 21\n                                                                                                                  // 22\n /**                                                                                                              // 23\nUI helper to check if current user is in at least one                                                         // 24\nof the target roles.  For use in client-side templates.                                                       // 25\n                                                                                                              // 26",
            "namespace": ""
        },
        "UIHelpers": {
            "name": "UIHelpers",
            "shortname": "UIHelpers",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "UIHelpers",
            "namespace": ""
        },
        "Roles": {
            "name": "Roles",
            "shortname": "Roles",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Roles",
            "namespace": "",
            "file": "roles/roles_common.js",
            "line": 17,
            "description": "Role-based authorization compatible with built-in Meteor accounts package.\n\nStores user's current roles in a 'roles' field on the user object.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "roles/roles_client.js",
            "line": 23,
            "description": "UI helper to check if current user is in at least one\nof the target roles.  For use in client-side templates.",
            "example": [
                "\n    {{#if isInRole 'admin'}}\n    {{/if}}\n\n    {{#if isInRole 'editor,user'}}\n    {{/if}}\n\n    {{#if isInRole 'editor,user' 'group1'}}\n    {{/if}}"
            ],
            "itemtype": "method",
            "name": "isInRole",
            "params": [
                {
                    "name": "role",
                    "description": "Name of role or comma-seperated list of roles",
                    "type": "String"
                },
                {
                    "name": "group",
                    "description": "Optional, name of group to check",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if current user is in at least one of the target roles",
                "type": "Boolean"
            },
            "static": 1,
            "class": "UIHelpers",
            "module": "UIHelpers"
        },
        {
            "file": "roles/roles_common.js",
            "line": 9,
            "description": "Roles collection documents consist only of an id and a role name.\n  ex: { _id:<uuid>, name: \"admin\" }",
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 35,
            "description": "Constant used to reference the special 'global' group that \ncan be used to apply blanket permissions across all groups.",
            "example": [
                "\n    Roles.addUsersToRoles(user, 'admin', Roles.GLOBAL_GROUP)\n    Roles.userIsInRole(user, 'admin') // => true\n\n    Roles.setUserRoles(user, 'support-staff', Roles.GLOBAL_GROUP)\n    Roles.userIsInRole(user, 'support-staff') // => true\n    Roles.userIsInRole(user, 'admin') // => false"
            ],
            "itemtype": "property",
            "name": "GLOBAL_GROUP",
            "type": "String",
            "static": 1,
            "final": 1,
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 55,
            "description": "Create a new role. Whitespace will be trimmed.",
            "itemtype": "method",
            "name": "createRole",
            "params": [
                {
                    "name": "role",
                    "description": "Name of role",
                    "type": "String"
                }
            ],
            "return": {
                "description": "id of new role",
                "type": "String"
            },
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 88,
            "description": "Delete an existing role.  Will throw \"Role in use\" error if any users\nare currently assigned to the target role.",
            "itemtype": "method",
            "name": "deleteRole",
            "params": [
                {
                    "name": "role",
                    "description": "Name of role",
                    "type": "String"
                }
            ],
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 112,
            "description": "Add users to roles. Will create roles as needed.\n\nNOTE: Mixing grouped and non-grouped roles for the same user\n      is not supported and will throw an error.\n\nMakes 2 calls to database:\n 1. retrieve list of all existing roles\n 2. update users' roles",
            "example": [
                "\n    Roles.addUsersToRoles(userId, 'admin')\n    Roles.addUsersToRoles(userId, ['view-secrets'], 'example.com')\n    Roles.addUsersToRoles([user1, user2], ['user','editor'])\n    Roles.addUsersToRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n    Roles.addUsersToRoles(userId, 'admin', Roles.GLOBAL_GROUP)"
            ],
            "itemtype": "method",
            "name": "addUsersToRoles",
            "params": [
                {
                    "name": "users",
                    "description": "User id(s) or object(s) with an _id field",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles/permissions to add users to",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional group name. If supplied, roles will be\n                        specific to that group.  \n                        Group names can not start with '$' or numbers.\n                        Periods in names '.' are automatically converted\n                        to underscores.\n                        The special group Roles.GLOBAL_GROUP provides \n                        a convenient way to assign blanket roles/permissions\n                        across all groups.  The roles/permissions in the \n                        Roles.GLOBAL_GROUP group will be automatically \n                        included in checks for any group.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 148,
            "description": "Set a users roles/permissions.",
            "example": [
                "\n    Roles.setUserRoles(userId, 'admin')\n    Roles.setUserRoles(userId, ['view-secrets'], 'example.com')\n    Roles.setUserRoles([user1, user2], ['user','editor'])\n    Roles.setUserRoles([user1, user2], ['glorious-admin', 'perform-action'], 'example.org')\n    Roles.setUserRoles(userId, 'admin', Roles.GLOBAL_GROUP)"
            ],
            "itemtype": "method",
            "name": "setUserRoles",
            "params": [
                {
                    "name": "users",
                    "description": "User id(s) or object(s) with an _id field",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles/permissions to add users to",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional group name. If supplied, roles will be\n                        specific to that group.  \n                        Group names can not start with '$'.\n                        Periods in names '.' are automatically converted\n                        to underscores.\n                        The special group Roles.GLOBAL_GROUP provides \n                        a convenient way to assign blanket roles/permissions\n                        across all groups.  The roles/permissions in the \n                        Roles.GLOBAL_GROUP group will be automatically \n                        included in checks for any group.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 177,
            "description": "Remove users from roles",
            "example": [
                "\n    Roles.removeUsersFromRoles(users.bob, 'admin')\n    Roles.removeUsersFromRoles([users.bob, users.joe], ['editor'])\n    Roles.removeUsersFromRoles([users.bob, users.joe], ['editor', 'user'])\n    Roles.removeUsersFromRoles(users.eve, ['user'], 'group1')"
            ],
            "itemtype": "method",
            "name": "removeUsersFromRoles",
            "params": [
                {
                    "name": "users",
                    "description": "User id(s) or object(s) with an _id field",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "Name(s) of roles to add users to",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional. Group name. If supplied, only that\n                        group will have roles removed.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 257,
            "description": "Check if user has specified permissions/roles",
            "example": [
                "\n    // non-group usage\n    Roles.userIsInRole(user, 'admin')\n    Roles.userIsInRole(user, ['admin','editor'])\n    Roles.userIsInRole(userId, 'admin')\n    Roles.userIsInRole(userId, ['admin','editor'])\n\n    // per-group usage\n    Roles.userIsInRole(user,   ['admin','editor'], 'group1')\n    Roles.userIsInRole(userId, ['admin','editor'], 'group1')\n    Roles.userIsInRole(userId, ['admin','editor'], Roles.GLOBAL_GROUP)\n\n    // this format can also be used as short-hand for Roles.GLOBAL_GROUP\n    Roles.userIsInRole(user, 'admin')"
            ],
            "itemtype": "method",
            "name": "userIsInRole",
            "params": [
                {
                    "name": "user",
                    "description": "User Id or actual user object",
                    "type": "String|Object"
                },
                {
                    "name": "roles",
                    "description": "Name of role/permission or Array of \n                           roles/permissions to check against.  If array, \n                           will return true if user is in _any_ role.",
                    "type": "String|Array"
                },
                {
                    "name": "group",
                    "description": "Optional. Name of group.  If supplied, limits check\n                        to just that group.\n                        The user's Roles.GLOBAL_GROUP will always be checked\n                        whether group is specified or not.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "true if user is in _any_ of the target roles",
                "type": "Boolean"
            },
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 369,
            "description": "Retrieve users roles",
            "itemtype": "method",
            "name": "getRolesForUser",
            "params": [
                {
                    "name": "user",
                    "description": "User Id or actual user object",
                    "type": "String|Object"
                },
                {
                    "name": "group",
                    "description": "Optional name of group to restrict roles to.\n                        User's Roles.GLOBAL_GROUP will also be included.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of user's roles, unsorted.",
                "type": "Array"
            },
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 411,
            "description": "Retrieve set of all existing roles",
            "itemtype": "method",
            "name": "getAllRoles",
            "return": {
                "description": "cursor of existing roles",
                "type": "Cursor"
            },
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 421,
            "description": "Retrieve all users who are in target role.  \n\nNOTE: This is an expensive query; it performs a full collection scan\non the users collection since there is no index set on the 'roles' field.  \nThis is by design as most queries will specify an _id so the _id index is \nused automatically.",
            "itemtype": "method",
            "name": "getUsersInRole",
            "params": [
                {
                    "name": "role",
                    "description": "Name of role/permission.  If array, users \n                           returned will have at least one of the roles\n                           specified but need not have _all_ roles.",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Optional name of group to restrict roles to.\n                        User's Roles.GLOBAL_GROUP will also be checked.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "cursor of users in role",
                "type": "Cursor"
            },
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 486,
            "description": "Retrieve users groups, if any",
            "itemtype": "method",
            "name": "getGroupsForUser",
            "params": [
                {
                    "name": "user",
                    "description": "User Id or actual user object",
                    "type": "String|Object"
                },
                {
                    "name": "role",
                    "description": "Optional name of roles to restrict groups to.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of user's groups, unsorted. Roles.GLOBAL_GROUP will be omitted",
                "type": "Array"
            },
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 534,
            "description": "Private function 'template' that uses $set to construct an update object\nfor MongoDB.  Passed to _updateUserRoles",
            "itemtype": "method",
            "name": "_update_$set_fn",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "roles",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "group",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "update object for use in MongoDB update command",
                "type": "Object"
            },
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 559,
            "description": "Private function 'template' that uses $addToSet to construct an update \nobject for MongoDB.  Passed to _updateUserRoles",
            "itemtype": "method",
            "name": "_update_$addToSet_fn",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "roles",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "group",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "update object for use in MongoDB update command",
                "type": "Object"
            },
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_common.js",
            "line": 585,
            "description": "Internal function that users the Template pattern to adds or sets roles \nfor users.",
            "itemtype": "method",
            "name": "_updateUserRoles",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "users",
                    "description": "user id(s) or object(s) with an _id field",
                    "type": "Array|String"
                },
                {
                    "name": "roles",
                    "description": "name(s) of roles/permissions to add users to",
                    "type": "Array|String"
                },
                {
                    "name": "group",
                    "description": "Group name. If not null or undefined, roles will be\n                        specific to that group.  \n                        Group names can not start with '$'.\n                        Periods in names '.' are automatically converted\n                        to underscores.\n                        The special group Roles.GLOBAL_GROUP provides \n                        a convenient way to assign blanket roles/permissions\n                        across all groups.  The roles/permissions in the \n                        Roles.GLOBAL_GROUP group will be automatically \n                        included in checks for any group.",
                    "type": "String"
                },
                {
                    "name": "updateFactory",
                    "description": "Func which returns an update object that\n                        will be passed to Mongo.",
                    "type": "Function"
                },
                {
                    "name": "roles",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "group",
                    "description": "",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "Roles",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 4,
            "description": "Roles collection documents consist only of an id and a role name.\n  ex: { _id:<uuid>, name: \"admin\" }",
            "class": "",
            "module": "Roles"
        },
        {
            "file": "roles/roles_server.js",
            "line": 16,
            "description": "Always publish logged-in user's roles so client-side\nchecks can work.",
            "class": "",
            "module": "Roles"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nRoles collection documents consist only of an id and a role name.\n  ex: { _id:<uuid>, name: \"admin\" }",
            "line": " roles/roles_common.js:9"
        },
        {
            "message": "Missing item type\nRoles collection documents consist only of an id and a role name.\n  ex: { _id:<uuid>, name: \"admin\" }",
            "line": " roles/roles_server.js:4"
        },
        {
            "message": "Missing item type\nAlways publish logged-in user's roles so client-side\nchecks can work.",
            "line": " roles/roles_server.js:16"
        }
    ]
}